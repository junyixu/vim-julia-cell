*julia-cell.txt*  run code cells in Julia
*julia-cell*

This plugin allows you to easily run Julia code from Vim,
including individual code cells similar to Jupyter notebooks and MATLAB.

==============================================================================
USAGE                                                     *julia-cell-usage*

Before using julia-cell, familiarize yourself with the |slime| plugin.

julia-cell does not add any custom mappings. Instead, it is up to the user
to define custom mappings for the commands below. For example, you can add the
following to your .vimrc: >

    " map <Leader>jr to run entire file
    nnoremap <Leader>jr :JuliaCellRun<CR>

    " map <Leader>jc to execute the current cell
    nnoremap <Leader>jc :JuliaCellExecuteCell<CR>

    " map <Leader>jC to execute the current cell and jump to the next cell
    nnoremap <Leader>jC :JuliaCellExecuteCellJump<CR>

    " map <Leader>jl to clear Julia screen
    nnoremap <Leader>jl :JuliaCellClear<CR>

    " map <Leader>jp and <Leader>jn to jump to the previous and next cell header
    nnoremap <Leader>jp :JuliaCellPrevCell<CR>
    nnoremap <Leader>jn :JuliaCellNextCell<CR>

    " map <Leader>je to execute the current line or current selection
    nmap <Leader>je <Plug>SlimeLineSend
    xmap <Leader>je <Plug>SlimeRegionSend

Code cells are by default defined by Vim marks (see |mark|). It is also
possible to use special text in the code (referred to as tags) to mark the
start of code cells by adding the following to your vimrc: >

    let g:julia_cell_delimit_cells_by = 'tags'

In that case, julia-cell will by default interpret any lines containing `##`
as cell headers.

Note that the cell execution feature copies your code to the system clipboard.
You may want to avoid using this feature if your code contains sensitive data.

==============================================================================
COMMANDS                                                 *julia-cell-commands*

                                                               *:JuliaCellRun*
:JuliaCellRun                       Run whole script in Julia.

                                                       *:JuliaCellExecuteCell*
:JuliaCellExecuteCell               Execute a single code cell in Julia.

                                                   *:JuliaCellExecuteCellJump*
:JuliaCellExecuteCellJump           Execute a single code cell in Julia, and
                                                 move cursor to the next cell.

                                                             *:JuliaCellClear*
:JuliaCellClear                     Clear Julia screen.

:JuliaCellPrevCell                                        *:JuliaCellPrevCell*
                                    Jump to the previous cell header.

:JuliaCellNextCell                                    *:JuliaCellNextCell*
                                    Jump to the next cell header.

==============================================================================
CONFIGURATION                                       *julia-cell-configuration*

The following configuration options allow you to specify how cells are
defined.

                                                 *julia_cell_delimit_cells_by*
g:julia_cell_delimit_cells_by     Delimit cells by Vim marks (`'marks'`,
                                    default) or a special tag in the code
                                    (`'tags'`).

                                                      *julia-cell-valid-marks*
g:julia_cell_valid_marks          Which marks to use to mark the boundary
                                    between cells.
                                    Default: `'abcdefghijklmnopqrstuvqxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'`

                                                              *julia-cell-tag*
g:julia_cell_tag                  What kind of comment tag to use to mark
                                    the boundary between cells
                                    (default `'##'`). This option is used only
                                    if `g:julia_cell_delimit_cells_by` is
                                    set to  `'tags'`.

==============================================================================
FAQ                                                           *julia-cell-faq*

Q: The 'JuliaCellExecuteCell' and 'JuliaCellExecuteCellJump' commands ~
do not work, but other commands such as JuliaCellRun work. Why? ~
A: First, make sure you have Tkinter installed (otherwise you will get an
error message) and a supported clipboard program, see README.
Also make sure your `DISPLAY` variable is correct, see next question.

Q: 'JuliaCellExecuteCell' and 'JuliaCellExecuteCellJump' do not execute ~
the correct code cell, or I get an error about 'can't open display', ~
'could not open display', 'could not connect to display', or something ~
similar, what do I do? ~
A: Make sure your DISPLAY environment variable is correct, especially after
re-attaching a screen or tmux session. In tmux you can update the DISPLAY
variable with the following command:

    eval $(tmux showenv -s DISPLAY)

Q: Should I use 'marks' or 'tags' to define cells? ~
A: This depends on personal preference. I used to use `'tags'` because they
are similar to MATLAB's `%%` code sections. `'tags'` are nice if you want the
cells to be saved together with your files, and may be easier to start with. I
switched to `'marks'` after discovering that I can show the marks in the
left-most column. I find `'marks'` to be more flexible because you can add and
change cells without changing the code, which is nice when your code is under
version control.

Q: How do I show the marks in the left-most column? ~
A: Use the vim-signature plugin:
    https://github.com/kshenoy/vim-signature

Q: How to send only the current line or selected lines to Julia? ~
A: Use the features provided by vim-slime. The default mapping `C-c C-c` (hold
down Ctrl and tap the C key twice) will send the current paragraph or the
selected lines to Julia. See |slime| for more information.

Q: How can I send other commands to Julia, e.g. '%who'? ~
A: You can easily send arbitary commands to Julia using the `:SlimeSend1`
command provided by vim-slime, e.g. `:SlimeSend1 %who`, and map these commands
to key combinations.

==============================================================================
ABOUT                                                       *julia-cell-about*

The latest versions can be found at
    http://github.com/mroavi/vim-julia-cell

This plugin was originally inspired by
    https://github.com/eldridgejm/tslime_ipython
